#!@PERL@ -w
# -*-CPerl-*-
#
# imgs2html : 複数の画像ファイルを元にHTMLファイルを自動的に作成します。
# $Id$
#
# Copyright (C) 1998-2003 by Masao Takaku, Yuka Egusa.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file must be encoded in EUC-JP encoding.

use Getopt::Long;
use Pod::Usage;
use Image::Size qw(html_imgsize);

use strict;

$| = 1;

#### 大域変数:
# バージョン番号
my $VERSION = "@VERSION@";

# デバッグ用
my $DEBUG = undef;

# ホームページの情報
my $HomepageUrl = "../";
$HomepageUrl = "/~$ENV{'USER'}/" if defined $ENV{'USER'};
$HomepageUrl = $ENV{'WWW_HOME'} if defined $ENV{'WWW_HOME'};

# 対象となる画像ファイルの拡張子: （-s オプション）
my $Suffix = "gif";

# アイコンファイルの入っているディレクトリ: （--icon-dir オプション）
my $IconDir = "../image";

# ページ or スライド？: （--unit-str オプション）
my $UnitStr="枚";

# サムネールのサイズ（オリジナルの画像に対するパーセンテージ）
my $ThumbnailRatio = "15%";

# スタイルシートのURI
my $Stylesheet = '';

# ナビゲーションバーで使うファイルとアンカー。(オプション設定可)
my %File = ();
$File{'first'} = "first.gif";
$File{'prev'} = "prev.gif";
$File{'next'} = "next.gif";
$File{'last'} = "last.gif";
$File{'index'} = "info.gif";
$File{'home'} = "home.gif";
$File{'logo'} = "logo.gif";
$File{'space'} = "space.gif";

my %Str = ();
$Str{'first'} = "最初のページ";
$Str{'prev'} = "前のページ";
$Str{'next'} = "次のページ";
$Str{'last'} = "最後のページ";
$Str{'index'} = "一覧";
$Str{'home'} = "ホームページ";
$Str{'logo'} = "ロゴ";
$Str{'space'} = "　　　　";

# (オプション設定用)
my %Opt = ();

# ロゴを表示するか？
$Opt{'logo'} = undef;

# タイトルを表示するか？
$Opt{'title'} = 1;

# ファイル名のソートを逆順に？
$Opt{'reverse'} = undef;

# HTML 生成機能のみ（サムネール生成を行わない）
$Opt{'htmlonly'} = undef;

main();
sub main {
    parse_options();

    print "対象ファイルを探索します。... ";
    my @files = pickup_files();
    if ($#files >= 1) {
	print $#files+1 ." ファイル見つけました。\n";
    } else {
	print "対象となる画像ファイルがありません。\n";
	exit 0;
    }

    unless ($Opt{'htmlonly'}) {
	print "一覧用のサムネイル画像を作成します。\n";
	make_thumbnails(@files);
    }

    print "HTMLファイルを作成します。\n";
    make_htmlfiles(@files);
    print "カレントディレクトリにHTMLファイルを作成しました。\n"
}

# 画像のタグ入り文字列作成  引数 ファイル名 と alt 文字列
sub get_img_tag($$) {
    my ($imagefile, $altstr) = @_;

    return $altstr if ! -f $imagefile;

    my $size = html_imgsize($imagefile);

    return "<img src=\"$imagefile\" alt=\"$altstr\" $size>";
}

# オプションを解析する。
sub parse_options() {
    my $opt_help = undef;
    my $opt_version = undef;
    my $opt_interactive = undef;

    Getopt::Long::config('bundling');
    GetOptions ('h|help'              => \$opt_help,
		'd|debug'             => \$DEBUG,
		'version'	      => \$opt_version,
		'i|interactive'	      => \$opt_interactive,
		's|suffix=s'          => \$Suffix,
		'r|thumbnail-ratio=s' => \$ThumbnailRatio,
		'u|homepage-url=s'    => \$HomepageUrl,
		'style=s'	      => \$Stylesheet,
		'icon-dir=s'          => \$IconDir,
		'icon-first-file=s'   => \$File{'first'},
		'icon-prev-file=s'    => \$File{'prev'},
		'icon-next-file=s'    => \$File{'next'},
		'icon-last-file=s'    => \$File{'last'},
		'icon-index-file=s'   => \$File{'index'},
		'icon-home-file=s'    => \$File{'home'},
		'icon-logo-file=s'    => \$File{'logo'},
		'nav-first-str=s'     => \$Str{'first'},
		'nav-prev-str=s'      => \$Str{'prev'},
		'nav-next-str=s'      => \$Str{'next'},
		'nav-last-str=s'      => \$Str{'last'},
		'nav-index-str=s'     => \$Str{'index'},
		'nav-home-str=s'      => \$Str{'home'},
		'nav-logo-str=s'      => \$Str{'logo'},
		'unit-str=s'	      => \$UnitStr,
		'logo!'               => \$Opt{'logo'},
		'title!'              => \$Opt{'title'},
		'reverse!'	      => \$Opt{'reverse'},
		'htmlonly!'	      => \$Opt{'htmlonly'}
	       ) || pod2usage(-exitval=>1, -verbose=>0);

    pod2usage(-exitval => 0, -verbose => 1)
	if ($opt_help);

    if ($opt_version) {
	print "imgs2html $VERSION\n";
	exit 0;
    }

    if ($opt_interactive) {
	read_options();
	getoptions_interactive();
    }

    if (@ARGV != 0) {
	print "\t警告: 以下の引数は無効です: @ARGV\n";
    }

    if ($DEBUG) {
	print "オプションの設定は以下の通りです。";
	foreach my $key (keys %Opt) {
	    print "  $key => $Opt{$key}\n";
	}
    }
}

sub getoptions_interactive {
    print "\n[設定項目]:\n";
    $Suffix = prompt("対象とする画像の拡張子", $Suffix);
    $Opt{'htmlonly'} = not prompt_yn("サムネールを生成する？",
				     not $Opt{'htmlonly'});
    $ThumbnailRatio = prompt("サムネール画像の縮小率", $ThumbnailRatio)
	unless $Opt{'htmlonly'};
    $Opt{'reverse'} = prompt_yn("画像の並び順を逆にする？",
				$Opt{'reverse'});
    $IconDir = prompt("アイコン画像のあるディレクトリ", $IconDir);
    print "\t警告: $IconDir は存在しません。画像アイコンの指定は無視されます。\n"
	unless -d $IconDir;
    $Stylesheet = prompt("スタイルシート（CSS）のURL", $Stylesheet);
    $HomepageUrl = prompt("ホームのURL", $HomepageUrl);
    $Opt{'title'} = prompt_yn("タイトル（〜$UnitStr目）を表示する？",
			      $Opt{'title'});
    $UnitStr = prompt("画像の呼び方（〜枚目）", $UnitStr) if $Opt{'title'};
    $Opt{'logo'} = prompt_yn("ロゴを表示する？", $Opt{'logo'});

    print "\n[ナビゲーションバーの設定]:\n";
    my @navbars = ('first', 'prev', 'next', 'last', 'index', 'home');
    push @navbars, 'logo' if $Opt{'logo'};
    foreach my $key (@navbars) {
	$File{$key} = prompt("「$Str{$key}」を示すアイコンのファイル名",
			     $File{$key})
	    if -d $IconDir;
	$Str{$key} = prompt("「$Str{$key}」を示す文字列", $Str{$key});
    }
    print "\n";

    getoptions_interactive()
	if not prompt_yn("以上の設定で実行してよろしいですか", 1);

    save_options();
}

# 設定項目を尋ね、答えを返す。
sub prompt($$) {
    my ($str, $default) = @_;
    my $default_str = $default || '';
    print "$str [$default_str]: ";
    my $input = <>;
    chomp($input);
    if (!length($input)) {
	return $default;
    } else {
	return $input;
    }
}

# 設定項目の可否を尋ね、答えを返す。
sub prompt_yn($$) {
    my ($str, $default) = @_;
    print "$str (y/n) ";
    print $default ? "[yes]: " : "[no]: ";
    my $input = <>;
    chomp($input);
    if (!length($input)) {
	return $default;
    } elsif ($input eq "y" || $input eq "yes") {
	return 1;
    } else {
	return undef;
    }
}

# オプション設定を保存する。: ./.imgs2html.options
sub save_options() {
    my $savefile = ".imgs2html.options";
    rename($savefile, "$savefile.bak") || die "error: $!" if -f $savefile;
    open(OPTIONS, "> $savefile") || die "open error: $savefile: $!";
    print OPTIONS <<EOF;
\$Suffix = '$Suffix';
\$ThumbnailRatio = '$ThumbnailRatio';
\$IconDir = '$IconDir';
\$Stylesheet = '$Stylesheet';
\$HomepageUrl = '$HomepageUrl';
\$UnitStr = '$UnitStr';
EOF
    foreach my $key (keys %Opt) {
	print OPTIONS "\$Opt{'$key'} = ";
	if (defined $Opt{$key}) {
	    print OPTIONS "'$Opt{$key}';\n"
	} else {
	    print OPTIONS "undef;\n"
	}
    }
    foreach my $key (keys %File) {
	print OPTIONS "\$File{'$key'} = '$File{$key}';\n";
	print OPTIONS "\$Str{'$key'} = '$Str{$key}';\n";
    }
    close OPTIONS;
}

# 前回起動時のオプション設定を読み込む。: ./.imgs2html.options
sub read_options() {
    return if not -r ".imgs2html.options"; # ファイルが無い場合は何もしない。

    open(OPTIONS, ".imgs2html.options") || die "open error: $!";
    my @tmp = <OPTIONS>;
    close OPTIONS;
    my $options = join('', @tmp);
    eval $options;
    warn $@ if $@; # エラーの場合
}

# サムネイル画像をつくる。
sub make_thumbnails(@) {
    my (@files) = @_;
    my $percentage = $ThumbnailRatio ."x". $ThumbnailRatio;
    foreach my $file (@files) {
	print "*";
	my $smallfile = small_filename($file);
	die "convertが実行できませんでした。:"
	    if system("@CONVERT@", "+profile", '*', "-geometry", $percentage, $file, $smallfile);
    }
    print " 完了\n";
}

sub small_filename($) {
    my ($filename) = @_;
    my $small_filename = $filename;
    $small_filename =~ s/(.*)\.$Suffix$/$1small\.$Suffix/;
    return $small_filename;
}

sub html_filename($) {
    my ($filename) = @_;
    my $html_filename = $filename;
    $html_filename =~ s/(.*)\.$Suffix/$1\.html/;
    return $html_filename;
}

# 対象となるファイルを探索し、ファイル名でソートしたリストを返す。
sub pickup_files() {
    opendir(DIR, ".") || die "読めません: $!";
    my @files = grep { -f && /\.$Suffix$/ } readdir(DIR);

    # imgs2html が作るサムネール画像は対象からはずす。
    @files = grep {! /small\.$Suffix$/} @files;
    closedir(DIR);

    return sort fncmp @files;
}

sub read_comment() {
    my %comment = ();
    if (-r ".comment") {
	open(COMMENT, ".comment") || die "error: $!";
	while (my $line = <COMMENT>) {
	    chomp($line);
	    if ($line =~ m#^([^\t]+)\t(.*)$#) {
		my $fname = $1;
		my $comment = $2;
		$comment{$fname} = $comment;
	    }
	}
    }
    return %comment;
}

sub save_comment(%) {
    my (%comment) = @_;
    my $savefile = ".comment";
    rename($savefile, "$savefile.bak") || die "error: $!" if -f $savefile;
    open(COMMENT, ">$savefile") || die "error: $!";
    foreach my $key (sort fncmp keys %comment) {
	print COMMENT "$key\t";
	print COMMENT $comment{$key} if defined $comment{$key};
	print COMMENT "\n";
    }
}

sub make_htmlfiles(@) {
    my (@files) = @_;

    my $style_tag = '';
    $style_tag = "<link rel=\"stylesheet\" href=\"$Stylesheet\" type=\"text/css\">" if length $Stylesheet;

    # HTMLのヘッダ部分
    my $HTML_Header = <<_EndOfHTML_;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-2022-JP">
$style_tag
<title>DUMMY TITLE (Automatically replacing)</title>
</head>
<body>
_EndOfHTML_

    my $date = localtime();
    # HTML の フッタ部分
    my $HTML_Footer = <<_EndOfHTML_;
<!-- Converted by imgs2html-$VERSION at $date -->
</body>
</html>
_EndOfHTML_

    # index.html のフッダ部分
    my $indexfooter = <<_EndOfHTML_;
</div>
<hr width="50%">
<div align="center"><a href="$HomepageUrl">$Str{'home'}へ</a></div>
_EndOfHTML_

    my $page = "1";
    my $lastnum = $#files + 1;

    my %htmlfiles = ();
    $htmlfiles{'first'} = html_filename($files[0]);
    $htmlfiles{'last'} = html_filename($files[$#files]);

    open(INDEXHTML, "|@NKF@ > index.html") || die "error: $!";
    $HTML_Header =~ s#<title>(.*)</title>#<title>一覧</title>#g;
    print INDEXHTML $HTML_Header;
    print INDEXHTML "<h1 align=\"center\">一覧 (全$lastnum${UnitStr})</h1>\n";
    print INDEXHTML "<div align=\"center\"><a href=\"$htmlfiles{'first'}\">一${UnitStr}目へ</a></div>\n";
    print INDEXHTML "<hr width=\"50%\">\n";
    print INDEXHTML "<div align=\"center\">\n";

    my %comment = read_comment();

    foreach my $file (@files) {
	print "*";
	my $smallfile = small_filename($file);
	my $htmlfile = html_filename($file);

        $htmlfiles{'prev'} = html_filename($files[$page-2])
	    if defined($files[$page-2]);
        $htmlfiles{'next'} = html_filename($files[$page])
	    if defined($files[$page]);

	my $dumpstr = get_img_tag($smallfile, "page $page");
        print INDEXHTML "<a href=\"$htmlfile\"";
	print INDEXHTML " title=\"$comment{$file}\"" if $comment{$file};
	print INDEXHTML ">$dumpstr</a>\n";

	open(HTML, "|@NKF@ > $htmlfile") || die "error: $!";

	# ヘッダ
	my $title = "${page}${UnitStr}目";
	if (not $Opt{'title'}) {
	    $title = $file;
	    $title .= ": $comment{$file}" if $comment{$file};
	}
	$HTML_Header =~
	    s#<title>(.*)</title>#<title>$title</title>#g;
        print HTML $HTML_Header;
        print HTML "<h1 align=\"center\">${page}${UnitStr}目</h1>\n"
	    if $Opt{'title'};
	print HTML get_navbar_html($page, $lastnum, undef, %htmlfiles);

	# 画像本体
	$dumpstr = get_img_tag($file, "page $page");
        print HTML "<div align=\"center\">\n$dumpstr\n</div>\n";

	# フッタ
	print HTML get_navbar_html($page, $lastnum, 1, %htmlfiles);
	if ($comment{$file}) {
	    print HTML "<hr width=\"50%\"><p align=\"center\">$comment{$file}</p>\n";
	} else {
	    $comment{$file} = "";
	}
	print HTML $HTML_Footer;

	close HTML;
	$page++;
    }
    save_comment(%comment);
    my $logostr = get_img_tag("$IconDir/$File{'logo'}", $Str{'logo'});
    print INDEXHTML $indexfooter;
    print INDEXHTML "<div align=\"right\">$logostr</div>\n" if $Opt{'logo'};
    print INDEXHTML $HTML_Footer;
    print " 完了\n";
}

# ナビゲーションバー部分のHTML
sub get_navbar_html($$$%) {
    my ($page, $lastnum, $noimage_mode, %htmlfiles) = @_;
    my %navbar = ();
    foreach my $key (keys %Str) {
	my $str = get_img_tag("$IconDir/$File{$key}", $Str{$key});
	$str = $Str{$key} if defined($noimage_mode);
	if ($key =~ /^(first|prev)$/) {
	    if ($page == 1) {
		$navbar{$key} = $str;
	    } else {
		$navbar{$key} = "<a href=\"$htmlfiles{$key}\">$str</a>",
	    }
	} elsif ($key =~ /^(next|last)$/) {
	    if ($page == $lastnum) {
		$navbar{$key} = $str;
	    } else {
		$navbar{$key} = "<a href=\"$htmlfiles{$key}\">$str</a>",
	    }
	} elsif ($key eq "space") {
	    $navbar{$key} = $str;
	} elsif ($key eq "index") {
	    $navbar{$key} = "<a href=\"index.html\">$str</a>";
	} elsif ($key eq "home") {
	    $navbar{$key} = "<a href=\"$HomepageUrl\">$str</a>";
	} elsif ($key eq "logo") {
	    $navbar{$key} = $str;
	}
    }

    my $retstr = <<EOF;
<div align="center">
$navbar{'first'}
$navbar{'prev'}
$navbar{'next'}
$navbar{'last'}
$navbar{'space'}
$navbar{'index'}
$navbar{'home'}
EOF
    $retstr .= "$navbar{'space'}\n$navbar{'logo'}\n"
	if $Opt{'logo'} && !defined($noimage_mode);
    $retstr .= "</div>\n";
    return $retstr;
}

## このサブルーチンは全文検索エンジン Namazu に由来します。
# Copyright (C) 1997-1999 Satoru Takabayashi All rights reserved.
# ファイル名を数字を考慮してソートする
# このコードはは古川@ヤマハさんに頂きました
sub fncmp {
    my ($x, $y) = ($a, $b);
    # ファイル名のソートを数値も考慮して行なう
    # 普通にやると、1, 10, 2, 3, ... の順になってしまう。
    # ちゃんとやる方法もあるが、面倒なので、
    # ケタ数を適当に制限して安易に実装。
    # ファイル名に 8 ケタより長い数字が無ければ大丈夫。

    $x =~ s/(\d+)/sprintf("%08d", $1)/ge;
    $y =~ s/(\d+)/sprintf("%08d", $1)/ge;

    if (defined($Opt{'reverse'})) {
	$y cmp $x;
    } else {
	$x cmp $y;
    }
}

=pod

=head1 NAME

imgs2html - generate HTML files from images files

=head1 SYNOPSIS

imgs2html [B<--interactive>] [B<--suffix>=SUFFIX] [B<--thumbnail-ratio>=SIZE]
[B<--reverse>] [B<--homepage-url>=URL] [B<--icon-dir>=DIR] [B<--style>=URL]
[B<--icon-I<role>-file>=FILE] [B<--nav-I<role>-str>=STR] [B<--logo>]
[B<--notitle>] [B<--unit-str>=STR] [B<--version>] [B<--help>]

=head1 DESCRIPTION

imgs2htmlは複数の画像ファイルを元にHTMLファイルを作成します。

このスクリプトを実行するとカレントディレクトリにある画像ファイルを探し、
それらの一覧と各画像からなるHTMLファイル群を生成します。

生成されるHTMLファイルの文字コードはISO-2022-JPです。

=head1 OPTIONS

以下のオプションを指定できます。

=over 4

=item B<-i>, B<--interactive>

対話的に設定事項の指定を行ってから実行できます。
（デフォルトは対話実行しません）

なお、対話実行時に設定した値は、 F<.imgs2html.options> ファイルに保存され、
再度実行した際にはその値が使われるようになります。

=item B<-s>, B<--suffix=SUFFIX>

対象とする画像の拡張子を指定します。
（デフォルトは gif です）

=item B<-r>, B<--thumbnail-ratio=SIZE>

サムネール画像の元画像からの比率を指定します。
（デフォルトは 15% です）

=item B<--reverse>

画像をファイル名の逆順に並べます。

=item B<-u>, B<--homepage-url=URL>

ホームのURLを指定します。
（デフォルトでは、1）環境変数 F<$WWW_HOME> が設定されていれば、その値 2）F<$USER> が設定されていれば "/~$USER"、これら環境変数の設定が無い場合は F<../> となります。）

=item B<--icon-dir=DIR>

ナビゲーション・アイコンのディレクトリ
（デフォルトは F<../image/> です）

=item B<--style=URL>

HTMLファイルで利用するスタイルシートのURLを指定します。
（デフォルトではスタイルシートは使いません）

=item B<--logo>

ロゴを表示します。
（デフォルトでは表示しません）

=item B<--notitle>

タイトル（○枚目）を表示しません。
（デフォルトでは表示します）

指定された場合、C<E<lt>titleE<gt>> 要素には画像ファイル名が入ります。

=item B<--htmlonly>

HTML 出力のみ行い、サムネイルを生成しません。
（デフォルトではサムネイル生成を常に行います）

=item B<--unit-str>=STR

「〜枚目」の出力を変更します。
（デフォルトでは"枚"）

=item (ナビゲーションバーの設定)

ナビゲーションバーの部分のアイコンや文字列などを変更するには、以下のオ
プションが利用できます。

I<role>の部分にはそれぞれ、
B<first>,
B<prev>,
B<next>,
B<last>,
B<logo>,
B<index>,
B<home>
のいずれかが入ります。

=over 4

=item B<--icon->I<role>B<-file=FILE>

ナビゲーションバーの各位置のアイコンのファイル名を指定します。
（ファイルが存在しない場合はアイコンは表示しません）

=item B<--nav->I<role>B<-str=STR>

ナビゲーションバーの各位置の説明文字列を設定します。

デフォルトの設定は以下の通り：

=over 4

=item B<--icon-first-file>	first.gif

=item B<--icon-prev-file>	prev.gif

=item B<--icon-next-file>	next.gif

=item B<--icon-last-file>	last.gif

=item B<--icon-home-file>	home.gif

=item B<--icon-index-file>	info.gif

=item B<--icon-logo-file>	logo.gif

=item B<--nav-first-str>	最初のページ

=item B<--nav-prev-str>		前のページ

=item B<--nav-next-str>		次のページ

=item B<--nav-last-str>		最後のページ

=item B<--nav-home-str>		ホームページ

=item B<--nav-index-str>	一覧

=item B<--nav-logo-str>		ロゴ

=back

=back

=item B<--version>

バージョンを表示します。

=item B<-h>, B<--help>

このヘルプを表示します。

=back

=head1 COMMENT

画像ファイルと同じディレクトリに F<.comment> ファイルを置くことで画像
に対するコメントを付与することができます。F<.comment> ファイルの書式は

  ファイル名	...コメント...

となり、ファイル名とコメントの間はタブ（"\t"）で区切られます。以下に例を
示します。

  foo.gif	コメント1
  bar.gif	コメント2

また、ファイル F<.comment> が存在しない場合は、実行時に自動的に作られ
ます。

=head1 PREREQUISITES

このスクリプトは、画像の処理にImageMagickを利用します。
また、日本語のコード変換にnkfを利用します。

=head1 COREQUISITES

B<ps2imgs>スクリプトと一緒に使うと効果的かもしれませんね。

=head1 AUTHOR

高久 雅生 E<lt>masao@ulis.ac.jpE<gt>, 江草 由佳 E<lt>yuka@ulis.ac.jpE<gt>

=cut
